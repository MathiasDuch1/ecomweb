// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String     @id @default(cuid())
  name            String?
  email           String     @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  role            UserRole   @default(USER)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  accounts        Account[]
  sessions        Session[]
  orders          Order[]
  reviews         Review[]
  cart            Cart?
  wishlist        Wishlist?
  addresses       Address[]
}

enum UserRole {
  USER
  ADMIN
}

// NextAuth models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier  String
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

// Product model
model Product {
  id                String            @id @default(cuid())
  name              String
  slug              String            @unique
  description       String?           @db.Text
  price             Decimal           @db.Decimal(10, 2)
  compareAtPrice    Decimal?          @db.Decimal(10, 2)
  cost              Decimal?          @db.Decimal(10, 2)
  sku               String?           @unique
  barcode           String?           @unique
  inventory         Int               @default(0)
  lowStockThreshold Int               @default(5)
  weight            Decimal?          @db.Decimal(10, 2)
  weightUnit        WeightUnit?
  dimensions        Json?
  isPhysical        Boolean           @default(true)
  isActive          Boolean           @default(true)
  isFeatured        Boolean           @default(false)
  images            ProductImage[]
  categoryId        String?           
  category          Category?         @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  orderItems        OrderItem[]
  cartItems         CartItem[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  wishlistItems     WishlistItem[]
}

enum WeightUnit {
  KG
  LB
  G
  OZ
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  isCover   Boolean @default(false)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Order model
model Order {
  id              String          @id @default(cuid())
  orderNumber     String          @unique
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  subTotal        Decimal         @db.Decimal(10, 2)
  tax             Decimal         @db.Decimal(10, 2)
  shipping        Decimal         @db.Decimal(10, 2)
  total           Decimal         @db.Decimal(10, 2)
  status          OrderStatus     @default(PENDING)
  paymentStatus   PaymentStatus   @default(PENDING)
  paymentMethod   PaymentMethod?
  paymentId       String?
  shippingAddress Address         @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String
  billingAddress  Address?        @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String?
  items           OrderItem[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  name       String
  price      Decimal @db.Decimal(10, 2)
  quantity   Int
}

// Review model
model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int      @db.SmallInt
  title     String?
  content   String?  @db.Text
  isPublished Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// Cart model
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  subtotal  Decimal    @default(0) @db.Decimal(10, 2)
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  
  @@unique([cartId, productId])
}

// Wishlist model
model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id          String   @id @default(cuid())
  wishlistId  String
  wishlist    Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  addedAt     DateTime @default(now())
  
  @@unique([wishlistId, productId])
}

// Address model
model Address {
  id                String     @id @default(cuid())
  userId            String
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String?
  company           String?
  addressLine1      String
  addressLine2      String?
  city              String
  state             String?
  postalCode        String
  country           String
  phone             String?
  isDefault         Boolean    @default(false)
  ordersShipping    Order[]    @relation("ShippingAddress")
  ordersBilling     Order[]    @relation("BillingAddress")
}
